game.StarterGui:SetCore("SendNotification", {
    Title = "Thanks for using my script!"; -- Required. Has to be a string!
    Text = "This chat commands script was made by R4suh/Ethan."; -- Required. Has to be a string.
})

wait(5)

game.StarterGui:SetCore("SendNotification", {
    Title = "Commands"; -- Required. Has to be a string!
    Text = "Type '.Commands' to see a full list of commands."; -- Required. Has to be a string.
})


local plr = game.Players.LocalPlayer
local Prefix = '.'

function Orbit() 
	local character = game.Players.LocalPlayer.Character
local hrp = character:WaitForChild("HumanoidRootPart")

local parts = {}
_G.Enabled = true

function RandomVariable(length)
	local res = ""
	for i = 1, length do
		res = res .. string.char(math.random(97, 122))
	end
	return res
end
local DoCheck = RandomVariable(20)
_G.DoCheck = DoCheck

for i, part in pairs(game.Workspace[game.Players.LocalPlayer.Name..'Aircraft']:GetChildren()) do
    if part.ClassName == "Model" then
	    table.insert(parts, part.PrimaryPart) -- put the parts into the table
    end
end

--local axis = Vector3.new(1, 0.5, 0)
--local speed = 20
while wait() do
    if _G.Enabled and _G.DoCheck == DoCheck then
    	for i, part in pairs(parts) do
    		if part:FindFirstChild("BodyVelocity") then
    		    local force = part.BodyVelocity
    		    local numbervalue = part.rot
    		    local speed = part.speed
    		    force.Velocity = (part.Position - hrp.Position):Cross(Vector3.new(0, numbervalue.Value, 0)).Unit * speed.Value
		    else
		        local numbervalue = Instance.new("NumberValue", part)
		        numbervalue.Name = "rot"
		        if math.random(1,2) == 1 then
		            numbervalue.Value = -1
	            else
	                numbervalue.Value = 1
		        end
                local speed = Instance.new("NumberValue", part)
                speed.Name = "speed"
                speed.Value = math.random(20, 50)
		        local force = Instance.new("BodyVelocity", part)
		        force.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
		        force.Velocity = (part.Position - hrp.Position):Cross(Vector3.new(0, numbervalue.Value, 0)).Unit * speed.Value
	        end
		end
	else
	    break
    end
end
end

function Rainbow()
    _G.Enabled = true

while wait(0.5) do
    if _G.Enabled then
        local args = {
            [1] = workspace.PlayerAircraft[game.Players.LocalPlayer.Name].BlockStd.BlockStd,
            [2] = Color3.new(math.random(0, 255) / 255, math.random(0, 255) / 255, math.random(0, 255) / 255),
            [3] = "a"
        }
        
        game:GetService("ReplicatedStorage").Remotes.Paint:FireServer(unpack(args))
    else
        break
    end
end
end


function PPBuilder()
    function place(x,y,z)
    spawn(function()
        local args = {
            [1] = Vector3.new(x, y, z),
            [2] = CFrame.new(Vector3.new(0, 0, 0), Vector3.new(-0, -0, -1)),
            [3] = 1,
            [4] = ""
        }
        game:GetService("ReplicatedStorage").Remotes.PlaceBIockRegion:InvokeServer(unpack(args))
    end)
    wait(0.08)
end


for x=3, 50, 5 do
    for z=1, 50, 2 do
        local x = x - 25
        local z = z - 25
        place(x, 1, z)
        place(x-1, 1, z)
        place(x-2, 1, z)
        place(x-1, 2, z)
        place(x-1, 3, z)
        place(x-1, 4, z)
    end
end
end

function Perlin()

    --local function GenerateNoiseMap(seed, mapSize, noiseScale, amplitude)
local seed = math.random(1,100000)
local mapSize = 51
local noiseScale = 10 
local amplitude = 10

local blocks = {1, 53, 74, 75, 24, 108}
for x = mapSize, 0, -1 do
	for z = mapSize, 0, -1 do
		for y = mapSize, 0, -1 do
			local xNoise = math.noise(y/noiseScale, z/noiseScale, seed) * amplitude
			local yNoise = math.noise(x/noiseScale, z/noiseScale, seed) * amplitude
			local zNoise = math.noise(x/noiseScale, y/noiseScale, seed) * amplitude
			
			local density = xNoise + yNoise	+ zNoise + y
							
			if density < 18 and density > 10 then
				spawn(function()
                    local args = {
                        [1] = Vector3.new(x-26, y-5, z-26),
                        [2] = CFrame.new(Vector3.new(0, 0, 0), Vector3.new(-0, -0, -1)),
                        [3] = blocks[math.random(1, #blocks)],
                        [4] = ""
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.PlaceBIockRegion:InvokeServer(unpack(args))
                end)
                wait(0.07)
			end
		end
	end
end
end





function BGrid()
    for x=1, 52, 2 do
    for z=1, 52, 2 do
        spawn(function()
            local A_1 = Vector3.new(x-26, 1, z-26)
            local A_2 = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
            local A_3 = 149
            local A_4 = ""
            local Event = game:GetService("ReplicatedStorage").Remotes.PlaceBIockRegion
            Event:InvokeServer(A_1, A_2, A_3, A_4)
        end)
        wait(0.15)
    end
end

for x=2, 52, 2 do
    for z=2, 52, 2 do
        spawn(function()
            local A_1 = Vector3.new(x-26, 1, z-26)
            local A_2 = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
            local A_3 = 149
            local A_4 = ""
            local Event = game:GetService("ReplicatedStorage").Remotes.PlaceBIockRegion
            Event:InvokeServer(A_1, A_2, A_3, A_4)
        end)
        wait(0.15)
    end
end
-- 53, 74, 75, 149
end



function Autopilot()

    -- Gui to Lua
-- Version: 3.2

-- Instances:

local PlaneCrazyAutopilot = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local Status = Instance.new("TextLabel")
local Orientation = Instance.new("TextLabel")
local E = Instance.new("TextLabel")
local TextBox = Instance.new("TextBox")
local Height = Instance.new("TextLabel")
local Enable = Instance.new("TextButton")
local Disable = Instance.new("TextButton")

--Properties:

PlaneCrazyAutopilot.Name = "Plane Crazy Autopilot"
PlaneCrazyAutopilot.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
PlaneCrazyAutopilot.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = PlaneCrazyAutopilot
Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Frame.Position = UDim2.new(0.674254715, 0, 0.284542263, 0)
Frame.Size = UDim2.new(0, 386, 0, 275)

Status.Name = "Status"
Status.Parent = Frame
Status.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Status.BackgroundTransparency = 1.000
Status.Position = UDim2.new(0.0507727116, 0, 0.291480392, 0)
Status.Size = UDim2.new(0, 225, 0, 50)
Status.Font = Enum.Font.SourceSans
Status.Text = "Status: "
Status.TextColor3 = Color3.fromRGB(255, 255, 255)
Status.TextSize = 24.000
Status.TextXAlignment = Enum.TextXAlignment.Left

Orientation.Name = "Orientation"
Orientation.Parent = Frame
Orientation.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Orientation.BackgroundTransparency = 1.000
Orientation.Position = UDim2.new(0.0507727116, 0, 0.406347632, 0)
Orientation.Size = UDim2.new(0, 225, 0, 50)
Orientation.Font = Enum.Font.SourceSans
Orientation.Text = "Orientation:"
Orientation.TextColor3 = Color3.fromRGB(255, 255, 255)
Orientation.TextSize = 24.000
Orientation.TextXAlignment = Enum.TextXAlignment.Left

E.Name = "E"
E.Parent = Frame
E.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
E.BackgroundTransparency = 1.000
E.Position = UDim2.new(0.144036949, 0, 0.0338777229, 0)
E.Size = UDim2.new(0, 274, 0, 50)
E.Font = Enum.Font.SourceSans
E.Text = "Disabled"
E.TextColor3 = Color3.fromRGB(255, 255, 255)
E.TextSize = 24.000

TextBox.Parent = Frame
TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextBox.BackgroundTransparency = 1.000
TextBox.Position = UDim2.new(0.0507727116, 0, 0.184529468, 0)
TextBox.Size = UDim2.new(0, 133, 0, 42)
TextBox.Font = Enum.Font.SourceSans
TextBox.PlaceholderColor3 = Color3.fromRGB(255, 255, 255)
TextBox.PlaceholderText = "Maintain Height"
TextBox.Text = ""
TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
TextBox.TextSize = 23.000
TextBox.TextXAlignment = Enum.TextXAlignment.Left

Height.Name = "Height"
Height.Parent = Frame
Height.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Height.BackgroundTransparency = 1.000
Height.Position = UDim2.new(0.0507727116, 0, 0.537256718, 0)
Height.Size = UDim2.new(0, 225, 0, 50)
Height.Font = Enum.Font.SourceSans
Height.Text = "Height:"
Height.TextColor3 = Color3.fromRGB(255, 255, 255)
Height.TextSize = 24.000
Height.TextXAlignment = Enum.TextXAlignment.Left

Enable.Name = "Enable"
Enable.Parent = Frame
Enable.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Enable.BorderColor3 = Color3.fromRGB(85, 255, 0)
Enable.Position = UDim2.new(0.0289978664, 0, 0.75272727, 0)
Enable.Size = UDim2.new(0, 171, 0, 50)
Enable.Font = Enum.Font.SourceSans
Enable.Text = "Enable"
Enable.TextColor3 = Color3.fromRGB(0, 255, 0)
Enable.TextSize = 25.000

Disable.Name = "Disable"
Disable.Parent = Frame
Disable.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Disable.BorderColor3 = Color3.fromRGB(255, 0, 0)
Disable.Position = UDim2.new(0.521225989, 0, 0.75272727, 0)
Disable.Size = UDim2.new(0, 171, 0, 50)
Disable.Font = Enum.Font.SourceSans
Disable.Text = "Disable"
Disable.TextColor3 = Color3.fromRGB(255, 0, 0)
Disable.TextSize = 25.000

_G.enabled = false

Enable.MouseButton1Click:Connect(function()
    _G.enabled = true
    E.Text = "Enabled"
end)

Disable.MouseButton1Click:Connect(function()
    _G.enabled = false
    E.Text = "Disabled"
end)


while wait() do
    pos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
    orientation = game.Players.LocalPlayer.Character.HumanoidRootPart.Orientation
    Orientation.Text = "Orientation: " .. tostring(orientation)
    Height.Text = "Height: " .. tostring(pos.y)
    assad = 0
    pcall(function()
       maintain = tonumber(TextBox.Text)
    end)
    
    if _G.enabled then
        if orientation.x > 15 and pos.y < (maintain + 300) then
            Status.Text = "Status: Pitching down"
            keypress(0x51)
            wait(0.03)
            keyrelease(0x51)
        elseif orientation.x < -15 then
            Status.Text = "Status: Pitching up"
            keypress(0x45)
            wait(0.03)
            keyrelease(0x45)
        elseif pos.y < maintain and orientation.x < 8 then
            Status.Text = "Status: Pitching up"
            keypress(0x45)
            wait(0.03)
            keyrelease(0x45)
        elseif pos.y > (maintain + 300) and orientation.x > -8 then
            Status.Text = "Status: Pitching down"
            keypress(0x51)
            wait(0.03)
            keyrelease(0x51)
        elseif orientation.x > 5 and pos.y > maintain and pos.y < (maintain + 300) then
            Status.Text = "Status: Pitching down"
            keypress(0x51)
            wait(0.03)
            keyrelease(0x51)
        elseif orientation.x < 1 and pos.y > maintain and pos.y < (maintain + 300) then
            Status.Text = "Status: Pitching up"
            keypress(0x45)
            wait(0.03)
            keyrelease(0x45)
        else
            Status.Text = "Status: Stopped pitching"
        end
    else
        Status.Text = "Status: Disabled"
    end
end
end

function InfiniteTerrain2()
local GeneratedC={} -- Used for tracking which chunks are currently loaded (could be merged with generationtracking but doesnt matter)
local GenerationTracking = {} -- used for tracking the parts in each chunk (for unloading) uses alot of memory but oh well
local randomizer = math.random(1, 600)
local seed = 4357345783458346361

local Settings = {
	['XSize'] = nil,
	['YSize'] = nil,
	['XScale'] = 200,
	['YScale'] = 200,
	['Spacing'] = 50,
	['Power'] = 100;
	['Amplifier'] = 2.5,
	['Frequency'] = 0.6,
	['Octaves'] = 10,
	['ChunkSize'] = 10,
	['ChunkCount'] = 7
}

local BiomeSettings = {

}

function GetNoise(t,seed,tog)

	tog = tog or 0
	-- t should contain layers of generation settings
	local RetVal = 0
	local noise = math.noise -- 2d noise, can be replaced with simplex if you can find a lua implementation

	for i,v in pairs(t) do
		--[[NOISE EQUASION]] if type(v) ~= 'table' then continue end

		local posX,posZ = v['posX'],v['posZ']
		local Spacing,ChunkSize = Settings.Spacing,Settings.ChunkSize


		--[[get the current chunk]]
		local function PositionFormula(Chunk,Offset)
			return (Offset*Spacing)+((Chunk*ChunkSize)*Spacing)
		end
		-- math is cool but its also kinda not cool
		local ChunkX,ChunkZ = t['Chunkx'],t['Chunkz']	
		local ChunkPosX,ChunkPosZ = t['i'],t['l']
		local posX=PositionFormula(ChunkX,ChunkPosX)
		local posZ=PositionFormula(ChunkZ,ChunkPosZ)

		--[[get the current chunk]] 


		RetVal+=math.noise(posX/v['scaleX'],posZ/v['scaleZ'],seed)*v['Power']


		--[[END NOISE EQUASION]]
	end

	local function gb(yx)
		return yx<0
	end
	--[[
	if tog == 0 then
		
		t['i'] +=1
		local x = GetNoise(t,seed,1)
		t['i'] -=2 
		local y = GetNoise(t,seed,1)
		t['i']+=1
		if gb(x) ~= gb(y) then return (x+y)/2 end
	end]]

	--if RetVal < 0 then return 0 end
	--if RetVal > 0 then return RetVal*2 end
	return RetVal	
end

-- CoverChunks

local BiomeInfo = {}
BiomeInfo['RockyMountains'] = {
	['Below'] = 10000;
	['Above'] = 150;
	['Properties'] = {
		['Color'] = Color3.new(0.5,0.5,0.5);
		['Material'] = Enum.Material.Rock;
	}
}
BiomeInfo['GrassLands'] = {
	['Below'] = 150;
	['Above'] = -10000 ;
	['Properties'] = {
		['Color'] = Color3.new(0,.4,0);
		['Material'] = Enum.Material.Grass;
	}
}


local function draw3dTriangle(a, b, c, parent, w1, w2)
	local wedge = Instance.new("WedgePart");
	wedge.Reflectance = 0
	wedge.Anchored = true;
	wedge.TopSurface = Enum.SurfaceType.Smooth;
	wedge.BottomSurface = Enum.SurfaceType.Smooth;

	local Store = {
		['a']=a;
		['b']=b;
		['c']=c;
	}

	a=a.Position
	b=b.Position
	c=c.Position
	local ab, ac, bc = b - a, c - a, c - b;
	local abd, acd, bcd = ab:Dot(ab), ac:Dot(ac), bc:Dot(bc);

	if (abd > acd and abd > bcd) then
		c, a = a, c;
	elseif (acd > bcd and acd > abd) then
		a, b = b, a;
	end

	ab, ac, bc = b - a, c - a, c - b;

	local right = ac:Cross(ab).unit;
	local up = bc:Cross(right).unit;
	local back = bc.unit;

	local height = math.abs(ab:Dot(up));

	w1 = w1 or wedge:Clone();
	w1.Name = 'w1'

	w1.Size = Vector3.new(0, height, math.abs(ab:Dot(back)));
	w1.CFrame = CFrame.fromMatrix((a + b)/2, right, up, back);
	w1.Parent = parent;

	w2 = w2 or wedge:Clone();
	w2.Name = 'w2'
	w2.Size = Vector3.new(0, height, math.abs(ac:Dot(back)));
	w2.CFrame = CFrame.fromMatrix((a + c)/2, -right, up, -back);
	w2.Parent = parent;
	
	-- biomes
	for biomename,biome in pairs(BiomeInfo) do
	    if biome.Below > w1.Position.y and w1.Position.y > biome.Above then
	        w1.Color = biome.Properties.Color
	        w1.Material = biome.Properties.Material
	        w2.Color = biome.Properties.Color
	        w2.Material = biome.Properties.Material
        end
	end
	
	local generateStructureInfo = {}
	generateStructureInfo["Trees"] = {
	    ["Chance"] = {1, 200},
	    ["TheModels"] = {"3287226226", "5960635089", "1278695440"},
	}
	generateStructureInfo["Bushes"] = {
	    ["Chance"] = {1, 80},
	    ["TheModels"] = {"5065709935", "5003870763", "190476937"},
	}
	--[[
	generateStructureInfo["NPC"] = {
	    ["Chance"] = {1, 500},
	    ["TheModels"] = {"99593113"},
	}]]
	
	-- random structures
	local modelsgenerated = {}
	local didgenerated = false
	for i,v in pairs(generateStructureInfo) do
	    if didgenerated == false then
    	    if math.random(v.Chance[1], v.Chance[2]) == 1 then
    	        didgenerated = true
    	        local themodelgenerated = game:GetObjects("rbxassetid://" .. v.TheModels[math.random(1, #v.TheModels)])[1]
                themodelgenerated.Parent = parent
                if themodelgenerated.ClassName == "Model" then
                    themodelgenerated:MoveTo(w1.Position + Vector3.new(math.random(-30, 30), 0, math.random(-30, 30)))
                elseif themodelgenerated.ClassName == "Part" then
                    themodelgenerated.Position = w1.Position + Vector3.new(math.random(-30, 30), 0, math.random(-30, 30))
                end
                table.insert(modelsgenerated, themodelgenerated)
            end
    	end
    end
	local Model = Instance.new('Model')
	if game.Workspace:FindFirstChild("TerrainSkin") then
	    Model.Parent = game.Workspace.TerrainSkin
    else
        local terrainskin = Instance.new("Folder", game.Workspace)
        terrainskin.Name = "TerrainSkin"
        Model.Parent = terrainskin
    end
	Model.Name = Store['a'].Name..'|'..Store['b'].Name..'|'..Store['c'].Name..'|'
	w1.Parent = Model
	w2.Parent = Model
	for i, v in pairs(modelsgenerated) do
	    v.Parent = Model
    end
	return w1, w2;
end

local function CoverChunk(x,z,Points)
	local StartingPartCFrame = CFrame.new((x*Settings.ChunkSize)*Settings.Spacing,10,(z*Settings.ChunkSize)*Settings.Spacing)
	local StartPartName = tostring(StartingPartCFrame.X/Settings.Spacing)..':'..tostring(StartingPartCFrame.Z/Settings.Spacing)
	local StartingPart = Points[StartPartName] 
	--if not StartingPart then return {} end
	local ChunkSize = Settings.ChunkSize 
	local Spacing = Settings.Spacing
	local RtrnTable = {}
	for i = 0,ChunkSize do
		for l = 0,ChunkSize do
			local EstimatedPCFrame = CFrame.new((i*Spacing)+((x*(ChunkSize))*Spacing),10,(l*Spacing)+((z*(ChunkSize))*Spacing))
			local EstimatedPartName = tostring(EstimatedPCFrame.X/Settings.Spacing)..':'..tostring(EstimatedPCFrame.Z/Settings.Spacing)
			local Part = Points[EstimatedPartName]
			if Part then
				local f = Part.Name:split(':')[1]
				local t = Part.Name:split(':')[2]
				local _,tx =  pcall(function() return {
					[1] = Part;
					[2] = Points[tostring(tonumber(f))..':'..tostring(tonumber(t+1))];
					[3] = Points[tostring(tonumber(f+1))..':'..tostring(tonumber(t))];
					}
				end)
				if tx and tx[1] and tx[2] and tx[3] then
					local p1,p2 = draw3dTriangle(tx[1],tx[2],tx[3],game.Workspace) -- pass part not position, must store part name for later use in the function
					table.insert(RtrnTable,p1)
					table.insert(RtrnTable,p2)
				end
				local _,t2 = pcall(function() return {
					[1] = Part;
					[2] = Points[tostring(tonumber(f+1))..':'..tostring(tonumber(t-1))];
					[3] = Points[tostring(tonumber(f+1))..':'..tostring(tonumber(t))];
					}
				end)
				if t2 and t2[1] and t2[2] and t2[3] then
					local p1,p2 = draw3dTriangle(t2[1],t2[2],t2[3],game.Workspace)
					table.insert(RtrnTable,p1)
					table.insert(RtrnTable,p2)
				end
			end
		end
	end
	return RtrnTable
end

-- terrain generation script

local function MakeChunk(Posx,Posz,seed) -- this will cause parts inbetween chunks to be duplicated, should be fixed if causes errors

	spawn(function()
		local ChunkSize = Settings.ChunkSize
		local Cpos=tostring(Posx)..':'..tostring(Posz)
		local Spacing = Settings.Spacing
		GenerationTracking[Cpos]={}
		local Points = {}
		local function PointConstructor(position,name)
			return {
				['Name'] = name;
				['Position'] = position;
			}
		end
		for i = 0, (ChunkSize) do
			for l = 0,(ChunkSize)  do
				--game:GetService('RunService').RenderStepped:Wait()

				local function Parta(Trans,Clr)

					return PointConstructor(Vector3.new(),'hi')--this is leftover from when nodes were actually parts
				end
				local optionsTable = {
					['Chunkx'] = Posx;
					['Chunkz'] = Posz;
					['i'] = i;
					['l'] = l;
					[1] = {
						['scaleX'] = 2000,
						['scaleZ'] = 2000,
						['Spacing'] = 17.5,
						['Power'] = 300;
						['amplitude'] = 2.5,
						['frequency'] = 0.6,
					};
					[2] = {
						['scaleX'] = 200,
						['scaleZ'] = 200,
						['Spacing'] = 17.5,
						['Power'] = 20;
						['amplitude'] = 2.5,
						['frequency'] = 0.6,

					};
					--[[[3] = {
						['posX'] = (i*Spacing)+((Posx*ChunkSize)*Spacing),
						['posZ'] = (l*Spacing)+((Posz*ChunkSize)*Spacing),
						['scaleX'] = 10,
						['scaleZ'] = 10,
						['Spacing'] = 17.5,
						['Power'] = 10;
						['amplitude'] = 1.5,
						['frequency'] = 0.3,
					}]]
				}
				--(i*Spacing)+((Posx*ChunkSize)*Spacing),(l*Spacing)+((Posz*ChunkSize)*Spacing),Settings.XScale,Settings.YScale,Settings.Octaves,seed,Settings.Power,Settings.Amplifier,Settings.Frequency
				local height = GetNoise(optionsTable,seed) -- posX, posZ, scaleX, scaleZ, octavess, seed,power,amplitude,frequency

				local Part = Parta(1,Color3.new(math.random(),math.random(),math.random()))
				Part.Position = Vector3.new((i*Spacing)+((Posx*(ChunkSize))*Spacing),height,(l*Spacing)+((Posz*(ChunkSize))*Spacing))
				Part.Name = tostring(Part.Position.X/Spacing)..':'..tostring(Part.Position.Z/Spacing)

				Points[Part.Name] = Part
				if game.Workspace:FindFirstChild("TerrainPoints") then
				    Part.Parent = game.Workspace.TerrainPoints
			    else
			        local terrainpoints = Instance.new("Folder", game.Workspace)
			        terrainpoints.Name = "TerrainPoints"
			        Part.Parent = terrainpoints
		        end

			end
		end

		local NewParts = CoverChunk(Posx,Posz,Points)
		for i,v in pairs(NewParts) do
			table.insert(GenerationTracking[Cpos],v)
		end
	end)
end

local starttick = tick()
local function IsEven(num)
	return num % 2 == 0
end
local c = Settings.ChunkCount/2
--[[for x = -c,c do 
	for y = -c,c do
		print(x,y)
		MakeChunk(x,y,seed)
		if c*2 > 4 then 
			wait((c)/32)
		end
	end
end]]

local RenderDistance = 6
local n = (Settings.ChunkSize)*Settings.Spacing
while wait() do 
	if not game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name) then game.Players.LocalPlayer.CharacterAdded:wait() game.Players.LocalPlayer.Character:WaitForChild('HumanoidRootPart') end
	local n = (Settings.ChunkSize)*Settings.Spacing
	local valuses = game.Players.LocalPlayer.Character.HumanoidRootPart.Position/Vector3.new(n,n,n)
	local Valx = valuses.x
	local Valz = valuses.z
	local vx = tonumber(math.floor(valuses.x))
	local vz = tonumber(math.floor(valuses.z))

	for i,v in pairs(GenerationTracking) do
		local Nsplit = i:split(':')
		local x = tonumber(Nsplit[1])
		local z = tonumber(Nsplit[2])
		if (x < vx-RenderDistance or x > vx + RenderDistance) or (z<vz-RenderDistance or z > vz+RenderDistance) then
			GeneratedC[x][z] = nil
			for _,y in pairs(v) do
				if y.Parent then
					y.Parent:Destroy()
				end
			end			
			GenerationTracking[i] = nil
		end
	end

	--check if any of the surrounding chunks arent made
	local tog
	for i=-RenderDistance,RenderDistance do
		for y=-RenderDistance,RenderDistance do
			if not GeneratedC[vx+i] or not (GeneratedC[vx+i] and GeneratedC[vx+i][vz+y]) then
				MakeChunk(vx+i,vz+y,seed)
				--print('GENERATING CHUNK:',vx+i,vz+y)
				GeneratedC[vx+i] = GeneratedC[vx+i] or {}
				GeneratedC[vx+i][vz+y] = true
			end

		end	
	end
	if not GeneratedC[vx] and not (GeneratedC[vx] and GeneratedC[vx][vz]) then
		MakeChunk(vx,vz,seed)


		GeneratedC[vx] = GeneratedC[vx] or {}
		GeneratedC[vx][vz] = true
	end
end
end


function InfiniteTerrain()
    local function callback(text)
    if text == "Yes" then
        InfiniteTerrain2()
    elseif text == "No" then
        print('no')
    end
end

local bindableFunction = Instance.new("BindableFunction")
bindableFunction.OnInvoke = callback

game.StarterGui:SetCore("SendNotification", {
    Title = "Warning"; -- Required. Has to be a string!
    Text = "This can lag your game, Do you want to continue?"; -- Required. Has to be a string!
    Icon = ""; -- Optional, defaults to "" (no icon)
    Duration = 99999999999999999999999999999999999999999999999999999999999999999999999999999999; -- Optional, defaults to 5 seconds
    Callback = bindableFunction; -- Optional, gets invoked with the text of the button the user pressed
    Button1 = "Yes"; -- Optional, makes a button appear with the given text that, when clicked, fires the Callback if it's given
    Button2 = "No"; -- Optional, makes another button appear with the given text that, when clicked, fires the Callback if it's given
})
end

function Commands()
    wait(0.5)
    game.StarterGui:SetCore("ChatMakeSystemMessage", {
    Text = "/ .Perlin Noise / .Rainbow / .Orbit / .PP / .BGrid / .Autopilot / .InfiniteTerrain / .Commands / .BringBlocks / .blockto [playername]";
    Font = Enum.Font.Cartoon;
    FontSize = Enum.FontSize.Size60;    
    })
end

function BringBlock()
   local Aircraft = game.Workspace.R4suhAircraft:GetChildren()
   
   for i=1, #Aircraft do
   	if Aircraft[i].Name == "BlockStd" then
	   local body = Instance.new("BodyPosition")
	   body.Parent = Aircraft[i].BlockStd
	   body.Position = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
	end
   end
end

local Players = game:GetService("Players") -- Get Player Service

--List of players in a table, to add more players add ["UserNameHere"] = true, to another line in the table

local CommandName = ".bomb" -- Command Name String
local CommandName2 = ".orbit"

local function runCommand(player, message)
    local values = tostring(message):split(" ") -- Splits chat message by spaces (" ") into a table by (message, playername, speedvalue)
    local command = tostring(values[1]) -- Command Name in Table
    
    if command:lower() == CommandName:lower() then -- Checks the Command in the Table
        local name = tostring(values[2]) -- Requested Name in table
        local playerToTeleportBlocksTo = Players:FindFirstChild(name) -- Gets the player
        if playerToTeleportBlocksTo ~= nil then -- Checks to see if there is a player, and if there is a speed value
            local hrp = playerToTeleportBlocksTo.Character:WaitForChild("HumanoidRootPart")
            local G = game.Workspace.R4suhAircraft:GetChildren()
            print(playerToTeleportBlocksTo)

            for i=1, #G do
                wait()
               if G[i].Name == "ExplosiveBlock" then
                  G[i].Decorate.CFrame = hrp.CFrame
               end
	    end
        end
    end
end

local function onPlayerAdded(player)
    player.Chatted:Connect(function (...)
        runCommand(player, ...)
    end)
end

-- Listen for players being added
for _, player in pairs(Players:GetPlayers()) do
    onPlayerAdded(player)
end
Players.PlayerAdded:Connect(onPlayerAdded)

plr.Chatted:Connect(function(msg)
	if msg == Prefix.."Rainbow" then 
        Rainbow()
    elseif msg == Prefix.."PP" then
        PPBuilder()
    elseif msg == Prefix.."Perlin Noise" then
        Perlin()
    elseif msg == Prefix.."BGrid" then
        BGrid()
    elseif msg == Prefix.."Autopilot" then
        Autopilot()
    elseif msg == Prefix.."InfiniteTerrain" then
        InfiniteTerrain()
    elseif msg == Prefix.."Commands" then
   	Commands()
    elseif msg == Prefix.."BringBlocks" then
    	BringBlock()
    elseif msg == Prefix.."Orbit" then
    	Orbit()
    end
end)
